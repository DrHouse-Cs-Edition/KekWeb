{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni_programmazione\\\\KekWeb\\\\app\\\\client\\\\src\\\\components\\\\pomodoroComponents\\\\Timer.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, Fragment, useRef } from 'react';\nimport { GenOptionDisplayer } from \"../GeneralOptionDisplayer.jsx\";\nimport { TTform, CyclesForm } from \"./FormSelector.jsx\";\n\n//*TMP for animation testing\nimport paper1 from \"../../pages/images/paper/paperPile1.png\";\nimport paper2 from \"../../pages/images/paper/paperPile2.png\";\nimport cat1 from \"../../pages/images/cat/cat1.png\";\nimport cat2 from \"../../pages/images/cat/cat2.png\";\n\n//! for the animation, sycnh some interval on 1000ms and two frames of an animation with the timer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SimpleTimer({\n  autoStart = 0\n}) {\n  _s();\n  //default is studyTime, expressed in seconds\n  const [StudyTime, updateStudyTime] = useState(0); //TODO choose format (seconds, milliseconds)\n  const [BreakTime, updateBreakTime] = useState(0); //TODO choose format (seconds, milliseconds)\n  const [Cycles, updateCycles] = useState(0); //indicates the number of full Cycles\n\n  const [formType, updateFormType] = useState('TT');\n  const [minutes, setMinutes] = useState(Math.trunc(StudyTime / 60 % 60)); //current timer minutes value\n  const [seconds, setSeconds] = useState(Math.trunc(StudyTime % 60)); //current timer seconds value\n  const [runTimer, setRunTimer] = useState(autoStart); //the timer is running? 1=yes, 0=no\n\n  const curTimer = useRef(0); //code for identifing current timer, if 0 it's the study timer, if 1 it's the break timer\n\n  //function used for switching the form used for recording StudyTime, BreakTime and Cycles\n  const changeForm = () => {\n    formType == 'TT' ? updateFormType('Cycles') : updateFormType('TT');\n  };\n\n  //function given to the forms for recording StudyTime, BreakTime, Cycles\n  const passTimeData = (sData, bData, cData) => {\n    updateStudyTime(sData);\n    updateBreakTime(bData);\n    updateCycles(cData);\n    //options have changed\n    setRunTimer(0);\n    curTimer.current = 0;\n    setMinutes(Math.trunc(sData / 60 % 60));\n    setSeconds(Math.trunc(sData % 60));\n  };\n\n  //*formComponents is an object, and TT and Cycles it's attributes. To the TT/Cycles attribute i assign a component\n  //*to access a component i use a similar syntax to that of arrays. I can use a different component based on the index\n  //*of the object (i'm accessing the component stored in the attribute)\n  let formComponents = {\n    TT: /*#__PURE__*/_jsxDEV(TTform, {\n      passTimeData: passTimeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 14\n    }, this),\n    Cycles: /*#__PURE__*/_jsxDEV(CyclesForm, {\n      passTimeData: passTimeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }, this)\n  };\n  let pomodoroInterval; //used for storing the setTimeout return value. \n\n  const timer = useEffect(() => {\n    if (runTimer) {\n      //normal update of the timer\n      pomodoroInterval = setTimeout(() => {\n        if (Cycles > 0) {\n          if (seconds == 0) {\n            if (minutes == 0) {\n              if (curTimer.current) {\n                //study timer initialization\n                updateCycles(Cycles - 1);\n                console.log(\"-1 Cycles\");\n                if (Cycles <= 1) {\n                  //set to 1 because of latency from useState\n                  clearTimeout(pomodoroInterval); //immediate clear of Cycles\n                  console.log(\"clearing interval inside\");\n                } else {\n                  setSeconds(Math.trunc(StudyTime % 60));\n                  setMinutes(Math.trunc(StudyTime / 60 % 60));\n                }\n              } else {\n                //break timer initialization\n                setSeconds(Math.trunc(BreakTime % 60));\n                setMinutes(Math.trunc(BreakTime / 60 % 60));\n              }\n              curTimer.current = !curTimer.current;\n              console.log(\"cur time is now \", curTimer.current);\n            } else {\n              setSeconds(59);\n              setMinutes(minutes - 1);\n            }\n          } else setSeconds(seconds - 1);\n        } else {\n          clearTimeout(pomodoroInterval);\n          console.log(\"clearing interval\");\n        } //failsafe clear of Cycles\n      }, 1000);\n    }\n  }, [minutes, seconds, runTimer]);\n  const stopTimer = () => {\n    clearTimeout(pomodoroInterval); //stops the timer from updating preemtively (no lag since pressing the button)\n    setRunTimer(false); //stops further updates, still running the useEffect\n  };\n\n  /* \r\n  *function used for restarting the current Cycles\r\n  *If studyTime was running, it just resets.\r\n  *If  breakTime was running, it switches to studyTime and begins anew\r\n  *Calling this function stops the  current timer and resets the Cycles\r\n  */\n  const CyclesReset = () => {\n    setRunTimer(0);\n    clearInterval(pomodoroInterval);\n    setMinutes(Math.trunc(StudyTime / 60 % 60));\n    setSeconds(Math.trunc(StudyTime % 60));\n  };\n\n  /* \r\n  *Function used for skipping the current Cycles.\r\n  *It doesn't stop the current Cycles, differently from the reset currently implemented\r\n  *by setting both minutes and seconds to 0, it will skip the current timer\r\n  *by also setting curTimer to 1, it then  switches to the next Cycles and start the StudyCycles\r\n  */\n  const skipCycles = () => {\n    alert(\"skipping Cycles\");\n    clearInterval(pomodoroInterval);\n    setSeconds(0);\n    setMinutes(0);\n    curTimer.current = 1;\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timerDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [minutes < 10 ? '0' + minutes : minutes, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [seconds < 10 ? '0' + seconds : seconds, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timerCurrentVals\",\n      children: /*#__PURE__*/_jsxDEV(GenOptionDisplayer, {\n        optionA: StudyTime,\n        optionB: BreakTime,\n        optionC: Cycles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"testingDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Testing buttons below \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setRunTimer(1);\n        },\n        children: \" run timer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopTimer,\n        children: \" Stop timer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: CyclesReset,\n        children: \" Reset Cycles \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: skipCycles,\n        children: \" Skip Cycles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"FormDiv\",\n      style: {\n        textAlign: 'center'\n      },\n      children: formComponents[formType]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeForm,\n      children: \"Change Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n_s(SimpleTimer, \"j3G4yRnCkjBpjidz61Q5qcww9G0=\");\n_c = SimpleTimer;\nexport { SimpleTimer };\nvar _c;\n$RefreshReg$(_c, \"SimpleTimer\");","map":{"version":3,"names":["useState","useEffect","Fragment","useRef","GenOptionDisplayer","TTform","CyclesForm","paper1","paper2","cat1","cat2","jsxDEV","_jsxDEV","SimpleTimer","autoStart","_s","StudyTime","updateStudyTime","BreakTime","updateBreakTime","Cycles","updateCycles","formType","updateFormType","minutes","setMinutes","Math","trunc","seconds","setSeconds","runTimer","setRunTimer","curTimer","changeForm","passTimeData","sData","bData","cData","current","formComponents","TT","fileName","_jsxFileName","lineNumber","columnNumber","pomodoroInterval","timer","setTimeout","console","log","clearTimeout","stopTimer","CyclesReset","clearInterval","skipCycles","alert","children","id","optionA","optionB","optionC","onClick","style","textAlign","_c","$RefreshReg$"],"sources":["F:/Uni_programmazione/KekWeb/app/client/src/components/pomodoroComponents/Timer.jsx"],"sourcesContent":["import {useState, useEffect, Fragment, useRef} from 'react';\r\nimport {GenOptionDisplayer} from \"../GeneralOptionDisplayer.jsx\"\r\nimport {TTform, CyclesForm} from \"./FormSelector.jsx\";\r\n\r\n//*TMP for animation testing\r\nimport paper1 from \"../../pages/images/paper/paperPile1.png\"\r\nimport paper2 from \"../../pages/images/paper/paperPile2.png\"\r\nimport cat1 from \"../../pages/images/cat/cat1.png\"\r\nimport cat2 from \"../../pages/images/cat/cat2.png\"\r\n\r\n//! for the animation, sycnh some interval on 1000ms and two frames of an animation with the timer\r\nfunction SimpleTimer( {autoStart = 0} ){   //default is studyTime, expressed in seconds\r\n    const [StudyTime, updateStudyTime] = useState(0);   //TODO choose format (seconds, milliseconds)\r\n    const [BreakTime, updateBreakTime] = useState(0);   //TODO choose format (seconds, milliseconds)\r\n    const [Cycles, updateCycles] = useState(0);         //indicates the number of full Cycles\r\n\r\n    const [formType, updateFormType] = useState('TT');\r\n\r\n    const [minutes, setMinutes] = useState(Math.trunc(StudyTime/60%60));        //current timer minutes value\r\n    const [seconds, setSeconds] = useState(Math.trunc(StudyTime%60));           //current timer seconds value\r\n    const [runTimer, setRunTimer] = useState(autoStart);                        //the timer is running? 1=yes, 0=no\r\n    \r\n    const curTimer = useRef(0);     //code for identifing current timer, if 0 it's the study timer, if 1 it's the break timer\r\n\r\n    //function used for switching the form used for recording StudyTime, BreakTime and Cycles\r\n    const changeForm = ()=>{\r\n        formType == 'TT' ? updateFormType('Cycles') : updateFormType('TT');\r\n    }\r\n\r\n    //function given to the forms for recording StudyTime, BreakTime, Cycles\r\n    const passTimeData = (sData, bData, cData)=>{\r\n        updateStudyTime(sData);\r\n        updateBreakTime(bData);\r\n        updateCycles(cData);\r\n        //options have changed\r\n        setRunTimer(0);\r\n        curTimer.current = 0;\r\n        setMinutes(Math.trunc(sData/60%60));\r\n        setSeconds(Math.trunc(sData%60));\r\n    }\r\n\r\n    //*formComponents is an object, and TT and Cycles it's attributes. To the TT/Cycles attribute i assign a component\r\n    //*to access a component i use a similar syntax to that of arrays. I can use a different component based on the index\r\n    //*of the object (i'm accessing the component stored in the attribute)\r\n    let formComponents = {\r\n        TT : <TTform passTimeData={passTimeData}></TTform>,\r\n        Cycles : <CyclesForm passTimeData={passTimeData}></CyclesForm>\r\n    }\r\n\r\n    let pomodoroInterval;   //used for storing the setTimeout return value. \r\n\r\n        const timer = useEffect(()=>{\r\n            if(runTimer){   //normal update of the timer\r\n                pomodoroInterval = setTimeout(()=>{ \r\n                    if(Cycles > 0){\r\n                        if(seconds == 0){\r\n                            if(minutes == 0){\r\n                                if(curTimer.current){//study timer initialization\r\n                                    updateCycles(Cycles-1); \r\n                                    console.log(\"-1 Cycles\");\r\n                                    if(Cycles <= 1 ){ //set to 1 because of latency from useState\r\n                                        clearTimeout(pomodoroInterval); //immediate clear of Cycles\r\n                                        console.log(\"clearing interval inside\"); \r\n                                    }else{\r\n                                        setSeconds(Math.trunc(StudyTime%60));\r\n                                        setMinutes(Math.trunc(StudyTime/60%60));\r\n                                    }     \r\n                                } else{ //break timer initialization\r\n                                    setSeconds(Math.trunc(BreakTime%60));\r\n                                    setMinutes(Math.trunc(BreakTime/60%60));\r\n                                }\r\n                                curTimer.current = !curTimer.current; \r\n                                console.log(\"cur time is now \", curTimer.current);\r\n                                }else\r\n                                {\r\n                                    setSeconds(59);\r\n                                    setMinutes(minutes-1);\r\n                                }\r\n                        }else\r\n                        setSeconds(seconds - 1);\r\n                    }else { clearTimeout(pomodoroInterval); console.log(\"clearing interval\"); } //failsafe clear of Cycles\r\n                }, 1000);\r\n            }                \r\n    }, [minutes, seconds, runTimer]);\r\n\r\n    const stopTimer = ()=>{\r\n        clearTimeout(pomodoroInterval); //stops the timer from updating preemtively (no lag since pressing the button)\r\n        setRunTimer(false); //stops further updates, still running the useEffect\r\n    }\r\n\r\n    /* \r\n    *function used for restarting the current Cycles\r\n    *If studyTime was running, it just resets.\r\n    *If  breakTime was running, it switches to studyTime and begins anew\r\n    *Calling this function stops the  current timer and resets the Cycles\r\n    */\r\n    const CyclesReset = ()=>{    \r\n        setRunTimer(0);\r\n        clearInterval(pomodoroInterval);\r\n        setMinutes(Math.trunc(StudyTime/60%60));\r\n        setSeconds(Math.trunc(StudyTime%60));\r\n    }\r\n\r\n    /* \r\n    *Function used for skipping the current Cycles.\r\n    *It doesn't stop the current Cycles, differently from the reset currently implemented\r\n    *by setting both minutes and seconds to 0, it will skip the current timer\r\n    *by also setting curTimer to 1, it then  switches to the next Cycles and start the StudyCycles\r\n    */\r\n    const skipCycles = ()=>{\r\n        alert(\"skipping Cycles\");\r\n        clearInterval(pomodoroInterval);\r\n        setSeconds(0);\r\n        setMinutes(0);\r\n        curTimer.current = 1;\r\n    }\r\n\r\n\r\n      \r\n    return(\r\n        <Fragment>\r\n            <div id= \"timerDiv\">\r\n                <span>{minutes < 10 ? '0' + minutes : minutes} </span>\r\n                <span>{seconds < 10 ? '0' + seconds : seconds} </span>\r\n            </div>\r\n            <div id = \"timerCurrentVals\">\r\n                <GenOptionDisplayer optionA={StudyTime} optionB={BreakTime} optionC={Cycles}></GenOptionDisplayer>\r\n            </div>\r\n            <div id=\"testingDiv\">\r\n                <h2> Testing buttons below </h2>\r\n                <button onClick={()=>{setRunTimer(1)}}> run timer </button>\r\n                <button onClick={stopTimer}> Stop timer </button>\r\n                <button onClick={CyclesReset}> Reset Cycles </button>\r\n                <button onClick={skipCycles}> Skip Cycles</button>\r\n            </div>\r\n\r\n            <div id= \"FormDiv\" style={{ textAlign : 'center'}}>\r\n                {formComponents[formType]}\r\n            </div>\r\n\r\n            <button onClick={changeForm}>Change Format</button>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport {SimpleTimer};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}