{"ast":null,"code":"import React,{useState,useEffect}from'react';import Navbar from'../components/Navbar';import{marked}from'marked';// Correct import\nimport'./Note.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Note(){const[noteName,setNoteName]=useState('');// utile perche con setNoteName cambia ogni istanza della variabile nel DOM con nuovo valore\nconst[noteText,setNoteText]=useState('');const[outputText,setOutputText]=useState('Qui comparirà il markdown corrispondente');marked.setOptions({breakkggs:true// Converti `\\n` in `<br>`\n});useEffect(()=>{// possibile alternativa: usare OnChange()?\n//console.log(marked.getOptions());\n//console.log('NoteText:', noteText);\n//console.log('Textarea value:', JSON.stringify(noteText));\nmarked.use({gfm:true,breaks:true});let txt=marked.parse(noteText);console.log(txt);txt=txt.replace(\"<p>\",\"\");// elimino primo paragrafo\ntxt=txt.replaceAll(\"</p>\",\"\");txt=txt.replaceAll(\"<p>\",\"<br>\");// converto tutti altri in linea vuota\ndocument.getElementById('outputNota').innerHTML=txt;// setOutputText(txt); non va bene perché txt è in html\n},[noteText]);// funzione viene applicato ogni volta che cambia noteText\nconst handleDelete=()=>{setNoteText('');setOutputText('');removeNote();};const handleCopy=()=>{navigator.clipboard.writeText(noteText).then(()=>alert(\"Copied the text: \"+noteText)).catch(err=>console.error('Failed to copy text:',err));};const handleSave=()=>{if(getName()){const note={title:noteName,text:noteText,date:new Date().toISOString()// Use current date in ISO format\n};fetch('http://localhost:5000/api/notes/save',{method:'POST',headers:{'Content-Type':'application/json; charset=UTF-8'},body:JSON.stringify(note)}).then(response=>response.json()).then(json=>{if(json.success){alert(json.message);}else{alert(\"Failed to save note\");}}).catch(err=>console.error('Failed to save note:',err));}};const removeNote=()=>{if(getName()){fetch('http://localhost:5000/api/notes/remove',{method:'POST',headers:{'Content-Type':'text/plain; charset=UTF-8'},body:noteName}).then(response=>response.json()).then(json=>{if(json.success){alert(json.message);}else{alert(\"Failed to remove note\");}}).catch(err=>console.error('Failed to remove note:',err));}};const handleLoad=()=>{if(getName()){fetch(`http://localhost:5000/api/notes/load?noteName=${noteName}`,{headers:{'Content-Type':'text/plain; charset=UTF-8'}}).then(response=>response.json()).then(json=>{if(json.success){setNoteText(json.text);alert(\"Note loaded\");}else{alert(\"Failed to load note\");}}).catch(err=>console.error('Failed to load note:',err));}};const getName=()=>{if(!noteName){alert(\"Insert a name\");return false;}return true;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"header\",{children:\"Note\"}),/*#__PURE__*/_jsx(\"input\",{id:\"title\",type:\"text\"// value={noteName} // val iniziale è quello dentro noteName\n,onChange:e=>setNoteName(e.target.value)// ogni volta che valore cambia => setNoteName(val aggiornato)\n,placeholder:\"Inserisci titolo\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLoad,children:\"Load\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"textarea\",{id:\"nota\",className:\"text\",placeholder:\"Scrivi qui la tua nota...\",onChange:e=>setNoteText(e.target.value)}),/*#__PURE__*/_jsx(\"p\",{id:\"outputNota\",className:\"output\",children:outputText})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleDelete,children:\"Delete\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCopy,children:\"Copy\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSave,children:\"Save\"}),/*#__PURE__*/_jsx(\"footer\",{children:\"Footer: Note V2.0\"})]});}export default Note;","map":{"version":3,"names":["React","useState","useEffect","Navbar","marked","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Note","noteName","setNoteName","noteText","setNoteText","outputText","setOutputText","setOptions","breakkggs","use","gfm","breaks","txt","parse","console","log","replace","replaceAll","document","getElementById","innerHTML","handleDelete","removeNote","handleCopy","navigator","clipboard","writeText","then","alert","catch","err","error","handleSave","getName","note","title","text","date","Date","toISOString","fetch","method","headers","body","JSON","stringify","response","json","success","message","handleLoad","children","id","type","onChange","e","target","value","placeholder","onClick","className"],"sources":["C:/Users/pahim/OneDrive/Desktop/git/KekWeb/app/client/src/pages/Note.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Navbar from '../components/Navbar';\r\nimport { marked } from 'marked'; // Correct import\r\nimport './Note.css'\r\n\r\nfunction Note() {\r\n  const [noteName, setNoteName] = useState(''); // utile perche con setNoteName cambia ogni istanza della variabile nel DOM con nuovo valore\r\n  const [noteText, setNoteText] = useState('');\r\n  const [outputText, setOutputText] = useState('Qui comparirà il markdown corrispondente');\r\n\r\n\r\n  marked.setOptions({\r\n    breakkggs: true,  // Converti `\\n` in `<br>`\r\n  });\r\n\r\n  \r\n  useEffect(() => { // possibile alternativa: usare OnChange()?\r\n    //console.log(marked.getOptions());\r\n    //console.log('NoteText:', noteText);\r\n    //console.log('Textarea value:', JSON.stringify(noteText));\r\n    \r\n    marked.use({\r\n      gfm: true,\r\n      breaks: true,\r\n    });\r\n    \r\n\r\n    let txt = marked.parse(noteText);\r\n    console.log(txt) \r\n    txt = txt.replace(\"<p>\",\"\"); // elimino primo paragrafo\r\n    txt = txt.replaceAll(\"</p>\",\"\");\r\n    txt = txt.replaceAll(\"<p>\",\"<br>\"); // converto tutti altri in linea vuota\r\n    document.getElementById('outputNota').innerHTML = txt; // setOutputText(txt); non va bene perché txt è in html\r\n  }, [noteText]);  // funzione viene applicato ogni volta che cambia noteText\r\n  \r\n  const handleDelete = () => {\r\n    setNoteText('');\r\n    setOutputText('');\r\n    removeNote();\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(noteText)\r\n      .then(() => alert(\"Copied the text: \" + noteText))\r\n      .catch(err => console.error('Failed to copy text:', err));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (getName()) {\r\n      const note = {\r\n        title: noteName,\r\n        text: noteText,\r\n        date: new Date().toISOString(), // Use current date in ISO format\r\n      };\r\n\r\n      fetch('http://localhost:5000/api/notes/save', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n        body: JSON.stringify(note),\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          alert(json.message);\r\n        } else {\r\n          alert(\"Failed to save note\");\r\n        }\r\n      })\r\n      .catch(err => console.error('Failed to save note:', err));\r\n    }\r\n  };\r\n\r\n  const removeNote = () => {\r\n    if (getName()) {\r\n      fetch('http://localhost:5000/api/notes/remove', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'text/plain; charset=UTF-8',\r\n        },\r\n        body: noteName,\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          alert(json.message);\r\n        } else {\r\n          alert(\"Failed to remove note\");\r\n        }\r\n      })\r\n      .catch(err => console.error('Failed to remove note:', err));\r\n    }\r\n  };\r\n\r\n  const handleLoad = () => {\r\n    if (getName()) {\r\n      fetch(`http://localhost:5000/api/notes/load?noteName=${noteName}`, {\r\n        headers: {\r\n          'Content-Type': 'text/plain; charset=UTF-8',\r\n        },\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          setNoteText(json.text);\r\n          alert(\"Note loaded\");\r\n        } else {\r\n          alert(\"Failed to load note\");\r\n        }\r\n      })\r\n      .catch(err => console.error('Failed to load note:', err));\r\n    }\r\n  };\r\n\r\n  const getName = () => {\r\n    if (!noteName) {\r\n      alert(\"Insert a name\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n        <header>Note</header>\r\n        <input\r\n          id=\"title\"\r\n          type=\"text\"\r\n          // value={noteName} // val iniziale è quello dentro noteName\r\n          onChange={(e) => setNoteName(e.target.value)} // ogni volta che valore cambia => setNoteName(val aggiornato)\r\n          placeholder=\"Inserisci titolo\"\r\n        />\r\n        <button onClick={handleLoad}>Load</button>\r\n\r\n        <div className=\"container\">\r\n            <textarea id=\"nota\" className=\"text\" placeholder=\"Scrivi qui la tua nota...\" onChange={(e) => setNoteText(e.target.value)}></textarea>\r\n            <p id=\"outputNota\" className=\"output\">{outputText}</p>\r\n        </div>\r\n\r\n        <button onClick={handleDelete}>Delete</button>\r\n        <button onClick={handleCopy}>Copy</button>\r\n        <button onClick={handleSave}>Save</button>\r\n        <footer>Footer: Note V2.0</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Note;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}