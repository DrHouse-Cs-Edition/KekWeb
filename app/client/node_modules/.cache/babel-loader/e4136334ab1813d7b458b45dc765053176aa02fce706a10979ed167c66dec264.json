{"ast":null,"code":"function OptionDisplay() {\n  // compute time factor\n  //!status: waiting validation\n  /*\r\n  * in order to calculate time, we need to discern the format used to communicate it\r\n  * after selecting format, take data and calculate time\r\n  */\n\n  let optionsArray = []; //array where any possible option is stored\n  let tmpTotalTime = document.getElementById(\"totalTime\").value;\n  console.log(`total time registered: ${tmpTotalTime}`);\n  let debugOptionCount = 0; //value used to print added option in the log\n\n  //calculation is based on the hypotesis that cycles are composed of 1 study phase and 1 rest phase, repeated on a loop\n  //rest phase must be shorter than study phase. Study phase ranges between 30-60 mins, rest phase 5-30 mins\n  //* additional parameter might be the ration of study or pause in a cycle compared to total time\n\n  tmpTotalTime = tmpTotalTime - tmpTotalTime % 5; //round the number by defect to a multiple of 5 (garantee no exceeding limit)\n  for (let i = 5; i <= 30; i = i + 5) {\n    //pause time for\n    for (let j = 30; j <= 60; j = j + 5)\n    //study time for\n    {\n      if (i <= j)\n        //if for option admission: is this acceptable? (*for future filter*)\n        {\n          if (tmpTotalTime % (i + j) == 0)\n            //single cycle of correct measure (can it be repeated to precise mesure?)\n            {\n              //here we add the option to the array\n              let tmp = {\n                pause: i,\n                study: j,\n                cycles: tmpTotalTime / (i + j),\n                totalTime: tmpTotalTime\n              };\n              optionsArray.push(tmp); //a new option is added  \n\n              //*debug code\n              console.log(`new possible timeFormat added: cycles: ${optionsArray[debugOptionCount].cycles},\n                        study time: ${optionsArray[debugOptionCount].study},\n                        rest time: ${optionsArray[debugOptionCount].pause} `);\n              debugOptionCount++;\n            }\n        }\n    }\n  }\n\n  // display options\n  //!status: waiting validation\n  let counter = 0; //counter for moving through the array\n  let TTdiv = document.getElementById(\"TTbox\");\n  console.log(`array length is ${optionsArray.length}`);\n  for (let i = 0; i < optionsArray.length; i = i + 1) {\n    //traverse the option array\n    let option = document.createElement(`input`);\n    option.type = \"radio\";\n    option.name = \"formatOption\";\n    option.value = `${i}`;\n    option.id = `TToption${i + 1}`;\n    let optionLabel = document.createElement(`label`);\n    optionLabel.id = `TTlabel${i + 1}`;\n    optionLabel.htmlFor = `TToption${i + 1}`;\n    optionLabel.innerHTML = `Study time: ${optionsArray[i].study}min, \n        Rest time: ${optionsArray[i].pause}min, \n        Cycles: ${optionsArray[i].cycles} </radio>`;\n    // TTdiv.innerHTML=`<input type=\"radio\" name=\"formatOption\" id=\"TToption${i+1}\">\n    // Study time: ${optionsArray[i].study}min, \n    // Rest time: ${optionsArray[i].pause}min, \n    // Cycles: ${optionsArray[i].cycles} </radio>\n    // `;\n\n    TTdiv.appendChild(option);\n    TTdiv.appendChild(optionLabel);\n    TTdiv.appendChild(document.createElement(`br`));\n    console.log(`added option: ${i}`);\n  }\n}\n_c = OptionDisplay;\nexport default OptionDisplay;\nvar _c;\n$RefreshReg$(_c, \"OptionDisplay\");","map":{"version":3,"names":["OptionDisplay","optionsArray","tmpTotalTime","document","getElementById","value","console","log","debugOptionCount","i","j","tmp","pause","study","cycles","totalTime","push","counter","TTdiv","length","option","createElement","type","name","id","optionLabel","htmlFor","innerHTML","appendChild","_c","$RefreshReg$"],"sources":["F:/Uni_programmazione/KekWeb/app/client/src/components/pomodoroComponents/OptionDisplay.jsx"],"sourcesContent":["\r\nfunction OptionDisplay(){\r\n\r\n    // compute time factor\r\n    //!status: waiting validation\r\n    /*\r\n    * in order to calculate time, we need to discern the format used to communicate it\r\n    * after selecting format, take data and calculate time\r\n    */\r\n\r\n    let optionsArray = [];  //array where any possible option is stored\r\n    let tmpTotalTime = document.getElementById(\"totalTime\").value;\r\n    console.log(`total time registered: ${tmpTotalTime}`);\r\n\r\n    let debugOptionCount = 0; //value used to print added option in the log\r\n\r\n    //calculation is based on the hypotesis that cycles are composed of 1 study phase and 1 rest phase, repeated on a loop\r\n    //rest phase must be shorter than study phase. Study phase ranges between 30-60 mins, rest phase 5-30 mins\r\n    //* additional parameter might be the ration of study or pause in a cycle compared to total time\r\n\r\n    tmpTotalTime =  tmpTotalTime - (tmpTotalTime % 5); //round the number by defect to a multiple of 5 (garantee no exceeding limit)\r\n    for( let i = 5; i <= 30 ;i = i+5){  //pause time for\r\n        for(let j = 30; j <= 60; j = j + 5 )    //study time for\r\n        {\r\n            if( i <= j) //if for option admission: is this acceptable? (*for future filter*)\r\n            {\r\n                if(tmpTotalTime % (i+j) == 0)   //single cycle of correct measure (can it be repeated to precise mesure?)\r\n                {\r\n                    //here we add the option to the array\r\n                    let tmp = {\r\n                        pause : i,\r\n                        study : j,\r\n                        cycles : tmpTotalTime / (i+j),\r\n                        totalTime : tmpTotalTime\r\n                    };\r\n                    optionsArray.push(tmp);      //a new option is added  \r\n                    \r\n                    //*debug code\r\n                    console.log(`new possible timeFormat added: cycles: ${optionsArray[debugOptionCount].cycles},\r\n                        study time: ${optionsArray[debugOptionCount].study},\r\n                        rest time: ${optionsArray[debugOptionCount].pause} `);\r\n                    debugOptionCount ++;                \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // display options\r\n    //!status: waiting validation\r\n    let counter = 0; //counter for moving through the array\r\n    let TTdiv = document.getElementById(\"TTbox\");\r\n    console.log(`array length is ${optionsArray.length}`);\r\n    for( let i = 0; i < optionsArray.length; i = i + 1){    //traverse the option array\r\n        let option = document.createElement(`input`);\r\n        option.type=\"radio\";\r\n        option.name=\"formatOption\";\r\n        option.value = `${i}`;\r\n        option.id = `TToption${i+1}`;\r\n\r\n        let optionLabel = document.createElement(`label`);\r\n        optionLabel.id = `TTlabel${i+1}`;\r\n        optionLabel.htmlFor = `TToption${i+1}`;\r\n        optionLabel.innerHTML =`Study time: ${optionsArray[i].study}min, \r\n        Rest time: ${optionsArray[i].pause}min, \r\n        Cycles: ${optionsArray[i].cycles} </radio>`;\r\n        // TTdiv.innerHTML=`<input type=\"radio\" name=\"formatOption\" id=\"TToption${i+1}\">\r\n        // Study time: ${optionsArray[i].study}min, \r\n        // Rest time: ${optionsArray[i].pause}min, \r\n        // Cycles: ${optionsArray[i].cycles} </radio>\r\n        // `;\r\n\r\n        TTdiv.appendChild(option);\r\n        TTdiv.appendChild(optionLabel);\r\n        TTdiv.appendChild(document.createElement(`br`));\r\n        console.log(`added option: ${i}`);\r\n    }\r\n}\r\n\r\nexport default OptionDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}