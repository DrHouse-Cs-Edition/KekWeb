{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni_programmazione\\\\KekWeb\\\\app\\\\client\\\\src\\\\pages\\\\Note.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { marked } from 'marked';\nimport './Note.css';\nimport { useParams } from 'react-router-dom'; //per permettere di avere id come Parametro di percorso\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Note() {\n  _s();\n  const navigate = useNavigate(); // useNavigate ritorna una funzione\n\n  const {\n    id\n  } = useParams(); // id come Parametro di percorso ( Note/:id )\n\n  const [noteName, setNoteName] = useState(''); // utile perché con setNoteName cambia ogni istanza della variabile nel DOM con nuovo valore\n  const [noteText, setNoteText] = useState('');\n  marked.setOptions({\n    breakkggs: true // converte `\\n` in `<br>` IN TEORIA\n  });\n  useEffect(() => {\n    // possibile alternativa: usare OnChange()?\n    //console.log(marked.getOptions());\n    //console.log('NoteText:', noteText);\n    //console.log('Textarea value:', JSON.stringify(noteText));\n\n    marked.use({\n      // anche questo converte `\\n` in `<br>` IN TEORIA\n      gfm: true,\n      breaks: true\n    });\n    let txt = marked.parse(noteText);\n    txt = txt.replace(\"<p>\", \"\"); // elimino primo paragrafo\n    txt = txt.replaceAll(\"</p>\", \"\");\n    txt = txt.replaceAll(\"<p>\", \"<br>\"); // converto tutti altri in linea vuota\n    document.getElementById('outputText').innerHTML = txt; // usare variabile useState(tipo \"setOutputText\") non va bene perché txt è in html\n  }, [noteText]); // funzione viene applicata ogni volta che cambia noteText\n\n  const handleDelete = () => {\n    fetch('http://localhost:5000/api/notes/remove/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'text/plain; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      if (json.success) {\n        alert(json.message);\n        navigate(`/noteNavigation`); // torno alle note\n      } else {\n        alert(json.message);\n      }\n    }).catch(err => console.error('Failed to remove note:', err));\n  };\n  const handleCopy = () => {\n    navigator.clipboard.writeText(noteText).then(() => alert(\"Testo copiato su appunti\")).catch(err => console.error('Errore durante la copia:', err));\n  };\n\n  //prende i dati della pagina e li invia al server perché siano salvati su mongoDB\n  const handleSave = () => {\n    if (getName()) {\n      // se c'é un titolo\n      const note = {\n        title: noteName,\n        text: noteText,\n        date: new Date().toISOString() // Use current date in ISO format\n      };\n      fetch('http://localhost:5000/api/notes/update/' + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        },\n        body: JSON.stringify(note)\n      }).then(response => response.json()).then(json => {\n        if (!json.success) alert(json.message);else alert(\"nota aggiornata\");\n      }).catch(err => console.error('Failed to save note:', err));\n    } else {\n      alert(\"per salvare la nota devi inserire un titolo\");\n    }\n  };\n\n  // riceve dati dal server (li prende da mongoDB) e li carica sulla pagina.\n  const handleLoad = () => {\n    fetch(`http://localhost:5000/api/notes/load/` + id, {\n      headers: {\n        'Content-Type': 'text/plain; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      if (json.success) {\n        setNoteName(json.title);\n        setNoteText(json.text);\n        alert(\"Note loaded\");\n      } else {\n        alert(json.message);\n      }\n    }).catch(err => console.error('error while loading note:' + err));\n  };\n  const getName = () => {\n    if (noteName) return true;else return false;\n  };\n\n  // useEffect esegue handleLoad una volta quando il componente viene montato\n  useEffect(() => {\n    handleLoad(); // Chiamare la funzione al caricamento del componente\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: \"Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"noteName\",\n      class: \"title\",\n      type: \"text\",\n      value: noteName // val iniziale è quello dentro noteName\n      ,\n      onChange: e => setNoteName(e.target.value) // ogni volta che valore cambia => setNoteName(val aggiornato)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"noteText\",\n        className: \"text\",\n        value: noteText,\n        onChange: e => setNoteText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"outputText\",\n        className: \"output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDelete,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCopy,\n      children: \"Copy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"Footer: Note V2.0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Note, \"oowhl7wnhZoXtK1ZbL/3rS6SnME=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useState","useEffect","marked","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Note","_s","navigate","id","noteName","setNoteName","noteText","setNoteText","setOptions","breakkggs","use","gfm","breaks","txt","parse","replace","replaceAll","document","getElementById","innerHTML","handleDelete","fetch","method","headers","then","response","json","success","alert","message","catch","err","console","error","handleCopy","navigator","clipboard","writeText","handleSave","getName","note","title","text","date","Date","toISOString","body","JSON","stringify","handleLoad","children","fileName","_jsxFileName","lineNumber","columnNumber","class","type","value","onChange","e","target","className","onClick","_c","$RefreshReg$"],"sources":["F:/Uni_programmazione/KekWeb/app/client/src/pages/Note.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { marked } from 'marked';\r\nimport './Note.css'\r\nimport { useParams } from 'react-router-dom'; //per permettere di avere id come Parametro di percorso\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Note() {\r\n\r\n  const navigate=useNavigate(); // useNavigate ritorna una funzione\r\n\r\n  const { id } = useParams(); // id come Parametro di percorso ( Note/:id )\r\n\r\n  const [noteName, setNoteName] = useState(''); // utile perché con setNoteName cambia ogni istanza della variabile nel DOM con nuovo valore\r\n  const [noteText, setNoteText] = useState('');\r\n\r\n\r\n  marked.setOptions({\r\n    breakkggs: true,  // converte `\\n` in `<br>` IN TEORIA\r\n  });\r\n\r\n  \r\n  useEffect(() => { // possibile alternativa: usare OnChange()?\r\n    //console.log(marked.getOptions());\r\n    //console.log('NoteText:', noteText);\r\n    //console.log('Textarea value:', JSON.stringify(noteText));\r\n    \r\n    marked.use({ // anche questo converte `\\n` in `<br>` IN TEORIA\r\n      gfm: true,\r\n      breaks: true,\r\n    });\r\n    \r\n    let txt = marked.parse(noteText);\r\n    txt = txt.replace(\"<p>\",\"\"); // elimino primo paragrafo\r\n    txt = txt.replaceAll(\"</p>\",\"\");\r\n    txt = txt.replaceAll(\"<p>\",\"<br>\"); // converto tutti altri in linea vuota\r\n    document.getElementById('outputText').innerHTML = txt; // usare variabile useState(tipo \"setOutputText\") non va bene perché txt è in html\r\n  }, [noteText]);  // funzione viene applicata ogni volta che cambia noteText\r\n  \r\n  const handleDelete = () => {\r\n    fetch('http://localhost:5000/api/notes/remove/' + id, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'text/plain; charset=UTF-8',\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      if (json.success) {\r\n        alert(json.message);\r\n        navigate(`/noteNavigation`); // torno alle note\r\n      } else {\r\n        alert(json.message);\r\n      }\r\n    })\r\n    .catch(err => console.error('Failed to remove note:', err));\r\n    \r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(noteText)\r\n      .then(() => alert(\"Testo copiato su appunti\"))\r\n      .catch(err => console.error('Errore durante la copia:', err));\r\n  };\r\n\r\n  //prende i dati della pagina e li invia al server perché siano salvati su mongoDB\r\n  const handleSave = () => {\r\n    if (getName()) { // se c'é un titolo\r\n      const note = {\r\n        title: noteName,\r\n        text: noteText,\r\n        date: new Date().toISOString(), // Use current date in ISO format\r\n      };\r\n\r\n      fetch('http://localhost:5000/api/notes/update/' + id, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n        body: JSON.stringify(note)\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        if (!json.success)\r\n          alert(json.message);\r\n        else\r\n          alert(\"nota aggiornata\");\r\n      })\r\n      .catch(err => console.error('Failed to save note:', err));\r\n    }\r\n    else{\r\n      alert(\"per salvare la nota devi inserire un titolo\")\r\n    }\r\n  };\r\n\r\n  // riceve dati dal server (li prende da mongoDB) e li carica sulla pagina.\r\n  const handleLoad = () => {\r\n    fetch(`http://localhost:5000/api/notes/load/` + id, {\r\n      headers: {\r\n        'Content-Type': 'text/plain; charset=UTF-8',\r\n      },\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      if (json.success) {\r\n        setNoteName(json.title);\r\n        setNoteText(json.text);\r\n        alert(\"Note loaded\");\r\n      } else {\r\n        alert(json.message);\r\n      }\r\n    })\r\n    .catch(err => console.error('error while loading note:' + err));\r\n  };\r\n\r\n  const getName = () => {\r\n    if (noteName)\r\n      return true;\r\n    else\r\n      return false;\r\n  };\r\n\r\n  // useEffect esegue handleLoad una volta quando il componente viene montato\r\n  useEffect(() => {\r\n    handleLoad();  // Chiamare la funzione al caricamento del componente\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n        <header>Note</header>\r\n        \r\n        <input\r\n          id=\"noteName\"\r\n          class=\"title\"\r\n          type=\"text\"\r\n          value={noteName} // val iniziale è quello dentro noteName\r\n          onChange={(e) => setNoteName(e.target.value)} // ogni volta che valore cambia => setNoteName(val aggiornato)\r\n        />\r\n\r\n        <div className=\"container\">\r\n            <textarea id=\"noteText\" className=\"text\" value={noteText} onChange={(e) => setNoteText(e.target.value)}></textarea>\r\n            <p id=\"outputText\" className=\"output\"></p>\r\n        </div>\r\n\r\n        <button onClick={handleDelete}>Delete</button>\r\n        <button onClick={handleCopy}>Copy</button>\r\n        <button onClick={handleSave}>Save</button>\r\n        <footer>Footer: Note V2.0</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Note;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}