{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni_programmazione\\\\KekWeb\\\\app\\\\client\\\\src\\\\components\\\\calendario\\\\Calendario.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport './Calendario.css';\nimport Evento from './Evento.jsx';\nimport Giorno from './Giorno.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeek = ['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'];\nconst Calendario = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(dayjs());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [eventTitle, setEventTitle] = useState('');\n  const startOfMonth = currentDate.startOf('month');\n  const endOfMonth = currentDate.endOf('month');\n  const startOfWeek = startOfMonth.startOf('week'); // primo giorno settimana contenente il primo giorno del mese (NOTA: comincia dalla domenica)\n  const endOfWeek = endOfMonth.endOf('week'); // ultimo giorno settimana contenente l'ultimo giorno del mese\n\n  const handlePrevMonth = () => {\n    setCurrentDate(currentDate.subtract(1, 'month'));\n  };\n  const handleNextMonth = () => {\n    setCurrentDate(currentDate.add(1, 'month'));\n  };\n  const handleDateClick = date => {\n    setSelectedDate(date); // giorno selezionato = giorno su cui hai cliccato\n  };\n  const handleAddEvent = e => {\n    e.preventDefault();\n    if (eventTitle.trim() !== '') {\n      setEvents([...events, {\n        date: selectedDate,\n        title: eventTitle\n      }]);\n      setEventTitle('');\n    }\n  };\n  const generateCalendar = () => {\n    const calendar = []; // calendario = unico array di \"giorni\" (componenti)\n    let date = startOfWeek;\n    while (date.isBefore(endOfMonth, 'day') || date.isSame(endOfMonth, 'day')) {\n      // isBefore(endOfWeek) mostra invece pezzo settimana prossimo mese\n      if (date.isBefore(startOfMonth, 'day'))\n        // facoltativo per eliminare giorni mese precedente\n        calendar.push( /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 31\n        }, this));else {\n        const dayEvents = events.filter(event => dayjs(event.date).isSame(date, 'day')); // filtra quelli che accadono nel giorno date\n        calendar.push( /*#__PURE__*/_jsxDEV(Giorno, {\n          date: date,\n          events: dayEvents,\n          selected: date.isSame(selectedDate, 'day'),\n          handleClick: handleDateClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this));\n      }\n      date = date.add(1, 'day');\n    }\n    return calendar;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: currentDate.format('MMMM YYYY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [daysOfWeek.map(day =>\n      /*#__PURE__*/\n      // scrive i giorni della settimana (lun,mar,mer,...)\n      _jsxDEV(\"div\", {\n        className: \"calendar-header\",\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)), generateCalendar() /*inserisce array di \"giorni\" html*/]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), selectedDate &&\n    /*#__PURE__*/\n    // se selectedDate non è null allora carica html\n    _jsxDEV(\"form\", {\n      className: \"event-form\",\n      onSubmit: handleAddEvent,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Add Event for \", selectedDate.format('MMMM DD, YYYY')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: eventTitle,\n        onChange: e => setEventTitle(e.target.value),\n        placeholder: \"Event Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Calendario, \"0UbibpSTryHOR3jGPMY13YTAaww=\");\n_c = Calendario;\nexport default Calendario;\nvar _c;\n$RefreshReg$(_c, \"Calendario\");","map":{"version":3,"names":["React","useState","dayjs","Evento","Giorno","jsxDEV","_jsxDEV","daysOfWeek","Calendario","_s","currentDate","setCurrentDate","selectedDate","setSelectedDate","events","setEvents","eventTitle","setEventTitle","startOfMonth","startOf","endOfMonth","endOf","startOfWeek","endOfWeek","handlePrevMonth","subtract","handleNextMonth","add","handleDateClick","date","handleAddEvent","e","preventDefault","trim","title","generateCalendar","calendar","isBefore","isSame","push","fileName","_jsxFileName","lineNumber","columnNumber","dayEvents","filter","event","selected","handleClick","children","onClick","format","className","map","day","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["F:/Uni_programmazione/KekWeb/app/client/src/components/calendario/Calendario.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport './Calendario.css';\r\nimport Evento from './Evento.jsx';\r\nimport Giorno from './Giorno.jsx';\r\n\r\nconst daysOfWeek = ['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'];\r\n\r\nconst Calendario = () => {\r\n    const [currentDate, setCurrentDate] = useState(dayjs());\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [events, setEvents] = useState([]);\r\n    const [eventTitle, setEventTitle] = useState('');\r\n\r\n    const startOfMonth = currentDate.startOf('month');\r\n    const endOfMonth = currentDate.endOf('month');\r\n    const startOfWeek = startOfMonth.startOf('week'); // primo giorno settimana contenente il primo giorno del mese (NOTA: comincia dalla domenica)\r\n    const endOfWeek = endOfMonth.endOf('week'); // ultimo giorno settimana contenente l'ultimo giorno del mese\r\n\r\n    const handlePrevMonth = () => {\r\n        setCurrentDate(currentDate.subtract(1, 'month'));\r\n    };\r\n\r\n    const handleNextMonth = () => {\r\n        setCurrentDate(currentDate.add(1, 'month'));\r\n    };\r\n\r\n    const handleDateClick = (date) => {\r\n        setSelectedDate(date); // giorno selezionato = giorno su cui hai cliccato\r\n    };\r\n\r\n    const handleAddEvent = (e) => {\r\n        e.preventDefault();\r\n        if (eventTitle.trim() !== '') {\r\n            setEvents([...events, { date: selectedDate, title: eventTitle }]);\r\n            setEventTitle('');\r\n        }\r\n    };\r\n\r\n    const generateCalendar = () => {\r\n        const calendar = []; // calendario = unico array di \"giorni\" (componenti)\r\n        let date = startOfWeek;\r\n\r\n        while (date.isBefore(endOfMonth, 'day') || date.isSame(endOfMonth, 'day') ) { // isBefore(endOfWeek) mostra invece pezzo settimana prossimo mese\r\n            if(date.isBefore(startOfMonth, 'day')) // facoltativo per eliminare giorni mese precedente\r\n                calendar.push(<div></div>);\r\n            else{\r\n                const dayEvents = events.filter(event => dayjs(event.date).isSame(date, 'day')); // filtra quelli che accadono nel giorno date\r\n                calendar.push(\r\n                    <Giorno date = {date} events={dayEvents} selected={date.isSame(selectedDate, 'day')} handleClick={handleDateClick}>\r\n                    </Giorno>\r\n                );\r\n            }\r\n            date = date.add(1, 'day');\r\n        }\r\n\r\n        return calendar;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={handlePrevMonth}>Previous</button>\r\n                <span>{currentDate.format('MMMM YYYY')}</span>\r\n                <button onClick={handleNextMonth}>Next</button>\r\n            </div>\r\n\r\n            <div className=\"calendar\">\r\n                {daysOfWeek.map((day) => ( // scrive i giorni della settimana (lun,mar,mer,...)\r\n                    <div key={day} className=\"calendar-header\">\r\n                        {day}\r\n                    </div>\r\n                ))}\r\n                {generateCalendar() /*inserisce array di \"giorni\" html*/}\r\n            </div>\r\n            \r\n            {selectedDate && ( // se selectedDate non è null allora carica html\r\n                <form className=\"event-form\" onSubmit={handleAddEvent}>\r\n                    <h3>Add Event for {selectedDate.format('MMMM DD, YYYY')}</h3>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={eventTitle}\r\n                        onChange={(e) => setEventTitle(e.target.value)}\r\n                        placeholder=\"Event Title\"\r\n                    />\r\n                    <button type=\"submit\">Add Event</button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Calendario;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}