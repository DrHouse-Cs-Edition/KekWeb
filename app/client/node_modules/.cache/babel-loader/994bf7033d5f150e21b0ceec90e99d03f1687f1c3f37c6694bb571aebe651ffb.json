{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni_programmazione\\\\KekWeb\\\\app\\\\client\\\\src\\\\pages\\\\NoteNavigation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Prewiew from '../components/Note/Prewiew.jsx';\nimport { useNavigate } from \"react-router-dom\";\n//import './Note_navigation.css'\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction NoteNavigation() {\n  _s();\n  const navigate = useNavigate(); // useNavigate ritorna solo una funzione, che poi va usata per navigare\n\n  const [notes, setNotes] = useState([{\n    id: \"1\",\n    title: \"TestNota\",\n    text: \"provaprova123\"\n  }]);\n\n  // Funzione per aggiungere un nuovo paragrafo alla visualizzazione\n  const loadNotes = newNotesArray => {\n    setNotes([...newNotesArray.map(note => ({\n      id: note._id,\n      title: note.title,\n      text: note.text,\n      date: note.date\n    }))]);\n  };\n  const deleteNote = index => {\n    setNotes(prevItems => prevItems.filter((elem, i) => i !== index)); // prevItems = restituisce valore attuale (dato da setState)\n    // filter = filtra tutti gli elementi che soddisfano condizione\n  };\n\n  // MONGODB\n\n  const handleRemove = index => {\n    fetch('http://localhost:5000/api/notes/remove/' + notes[index].id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'text/plain; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      if (json.success) {\n        alert(json.message);\n        deleteNote(index); // rimuove solo l'eliminato, non ricarica tutto\n      } else {\n        alert(\"Failed to remove note\");\n      }\n    }).catch(err => console.error('Failed to remove note:', err));\n  };\n\n  // riceve dati dal server (li prende da mongoDB) e li carica sulla pagina.\n  const handleLoad = () => {\n    fetch(`http://localhost:5000/api/notes/all`, {\n      headers: {\n        'Content-Type': 'text/plain; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      if (json.success) {\n        loadNotes(json.list); // aggiorna tutte note html\n        alert(\"Notes loaded\");\n      } else {\n        alert(\"Failed to load notes\");\n      }\n    }).catch(err => console.error('Failed to load notes:', err));\n  };\n\n  //prende i dati della pagina e li invia al server perché siano salvati su mongoDB\n  const handleAdd = () => {\n    const note = {\n      title: \"insert title\",\n      text: \"\",\n      date: new Date().toISOString() // Use current date in ISO format\n    };\n    fetch('http://localhost:5000/api/notes/save', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      },\n      body: JSON.stringify(note)\n    }).then(response => response.json()).then(json => {\n      if (json.success) {\n        alert(json.message);\n        handleLoad(); // devo rifare richiesta al server perché l'id lo crea mongoDB\n      } else {\n        alert(\"Failed to save note\");\n      }\n    }).catch(err => console.error('Failed to save note:', err));\n  };\n\n  // useEffect esegue handleLoad una volta quando il componente viene montato\n  useEffect(() => {\n    handleLoad(); // Chiamare la funzione al caricamento del componente\n  }, []);\n  const openNote = id => {\n    navigate(`/note/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: \"Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAdd(),\n      children: \"Aggiungi nota\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: notes.map((note, index) => /*#__PURE__*/_jsxDEV(Prewiew, {\n        id: note.id,\n        title: note.title,\n        text: note.text,\n        date: note.date,\n        handleDelete: () => handleRemove(index),\n        handleClick: () => openNote(note.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 36\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"Footer: Note V2.0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n  // array.map( (elem) => {funz} ) = funzione js che esegue \"funz\" una volta per ogni elemento \"elem\" dell'array\n}\n_s(NoteNavigation, \"gWrwP6tdwOEZcylcCKXnThSjYrM=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteNavigation;\nexport default NoteNavigation;\nvar _c;\n$RefreshReg$(_c, \"NoteNavigation\");","map":{"version":3,"names":["React","useState","useEffect","Prewiew","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteNavigation","_s","navigate","notes","setNotes","id","title","text","loadNotes","newNotesArray","map","note","_id","date","deleteNote","index","prevItems","filter","elem","i","handleRemove","fetch","method","headers","then","response","json","success","alert","message","catch","err","console","error","handleLoad","list","handleAdd","Date","toISOString","body","JSON","stringify","openNote","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleDelete","handleClick","_c","$RefreshReg$"],"sources":["F:/Uni_programmazione/KekWeb/app/client/src/pages/NoteNavigation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Prewiew from '../components/Note/Prewiew.jsx';\r\nimport { useNavigate } from \"react-router-dom\";\r\n//import './Note_navigation.css'\r\n\r\nfunction NoteNavigation() {\r\n\r\n  const navigate = useNavigate(); // useNavigate ritorna solo una funzione, che poi va usata per navigare\r\n\r\n  const [notes, setNotes] = useState([{id: \"1\", title: \"TestNota\", text: \"provaprova123\"}]);\r\n\r\n  // Funzione per aggiungere un nuovo paragrafo alla visualizzazione\r\n  const loadNotes = (newNotesArray) => {\r\n    setNotes([...newNotesArray.map(note => ({\r\n      id: note._id,\r\n      title: note.title,\r\n      text: note.text,\r\n      date: note.date\r\n      }))\r\n    ]);\r\n  }\r\n\r\n  const deleteNote = (index) => {\r\n    setNotes((prevItems) => prevItems.filter((elem, i) => i !== index)); // prevItems = restituisce valore attuale (dato da setState)\r\n    // filter = filtra tutti gli elementi che soddisfano condizione\r\n  }\r\n\r\n  // MONGODB\r\n\r\n  const handleRemove = (index) => {\r\n    fetch('http://localhost:5000/api/notes/remove/' + notes[index].id, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'text/plain; charset=UTF-8',\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      if (json.success) {\r\n        alert(json.message);\r\n        deleteNote(index); // rimuove solo l'eliminato, non ricarica tutto\r\n      } else {\r\n        alert(\"Failed to remove note\");\r\n      }\r\n    })\r\n    .catch(err => console.error('Failed to remove note:', err));\r\n  };\r\n\r\n  // riceve dati dal server (li prende da mongoDB) e li carica sulla pagina.\r\n  const handleLoad = () => {\r\n    fetch(`http://localhost:5000/api/notes/all`, {\r\n      headers: {\r\n        'Content-Type': 'text/plain; charset=UTF-8',\r\n      },\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      if (json.success) {\r\n        loadNotes(json.list); // aggiorna tutte note html\r\n        alert(\"Notes loaded\");\r\n      } else {\r\n        alert(\"Failed to load notes\");\r\n      }\r\n    })\r\n    .catch(err => console.error('Failed to load notes:', err));\r\n  };\r\n\r\n  //prende i dati della pagina e li invia al server perché siano salvati su mongoDB\r\n  const handleAdd = () => {\r\n    const note = {\r\n      title: \"insert title\",\r\n      text: \"\",\r\n      date: new Date().toISOString(), // Use current date in ISO format\r\n    };\r\n\r\n    fetch('http://localhost:5000/api/notes/save', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n      },\r\n      body: JSON.stringify(note),\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      if (json.success) {\r\n        alert(json.message);\r\n        handleLoad(); // devo rifare richiesta al server perché l'id lo crea mongoDB\r\n      } else {\r\n        alert(\"Failed to save note\");\r\n      }\r\n    })\r\n    .catch(err => console.error('Failed to save note:', err));\r\n  };\r\n\r\n  // useEffect esegue handleLoad una volta quando il componente viene montato\r\n  useEffect(() => {\r\n    handleLoad();  // Chiamare la funzione al caricamento del componente\r\n  }, []);\r\n\r\n  const openNote = (id)=>{\r\n    navigate(`/note/${id}`);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header>Note</header>\r\n      <button onClick={()=>handleAdd()}>\r\n        Aggiungi nota\r\n      </button>\r\n\r\n      <div>\r\n        {notes.map( (note,index)=> <Prewiew id={note.id} title={note.title} text={note.text} date={note.date} handleDelete={()=>handleRemove(index)} handleClick={()=>openNote(note.id)}></Prewiew> )}\r\n      </div>\r\n      <footer>Footer: Note V2.0</footer>\r\n    </>\r\n  );\r\n  // array.map( (elem) => {funz} ) = funzione js che esegue \"funz\" una volta per ogni elemento \"elem\" dell'array\r\n}\r\n\r\nexport default NoteNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}